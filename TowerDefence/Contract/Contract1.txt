// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

//Importing ERC 1155 Token contract from OpenZeppelin
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/ERC1155.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol";

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol";
import {ERC20Spendable} from "./ERC20GameToken.sol";

contract MyGameContract is ERC1155 , Ownable  {
    
    string constant public name = "MyGameContract";
    string constant dgi445qF = "CXi";

    mapping(address => string) _NFTList;
    
    uint256[] nonburnableNFT = [700,701,702,703];

     constructor() ERC1155("")  {
    }

    ERC20Spendable _mintingCurrency;
    IERC20  tokenAddress;
  
    function mintingCurrency() external view returns (ERC20Spendable) {
        return _mintingCurrency;
    }

     function SetERC20Currency(address  _tokenAddress) onlyOwner external {
        tokenAddress = IERC20(_tokenAddress);
        _mintingCurrency = ERC20Spendable(_tokenAddress);
    }

     function ConvertTokens(uint256 _amount) public {
        require(tokenAddress.balanceOf(msg.sender) >= (_amount * 10 ** 18), "Not enough tokens");
        _mintingCurrency.spend(msg.sender, _amount * 10 ** 18);
    }
      
      function TokenBalnace() public view virtual  returns (uint256) {
        return tokenAddress.balanceOf(msg.sender);
    }

//purchase coins 
    function BuyCoins(uint256 _itemId) payable public /*onlyOwner*/{
    }

//buy burnable nft
    function buyNonBurnItem(uint256 _tokenId) public /*onlyOwner*/{
        require(_tokenId <= nonburnableNFT.length , "invalid item");
        _mint(msg.sender, nonburnableNFT[_tokenId], 1, "");
        bytes memory a = abi.encodePacked(_NFTList[msg.sender], ",", Strings.toString(nonburnableNFT[_tokenId]));
       _NFTList[msg.sender] = string(a);
    }

     function GetAllUserToken(address _add) public view returns (string memory) {
           return _NFTList[_add] ;
    }

    function getCurrentTime() public view returns(uint256 _result){
        return _result = block.timestamp;
    }
 

   

    function withdraw(address _recipient) public payable onlyOwner {
    payable(_recipient).transfer(address(this).balance);
}
}